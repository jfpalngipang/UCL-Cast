<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>sample</title>
    <link rel="stylesheet" type="text/css" href="/css/foundation/foundation.css">
    <link rel="stylesheet" type="text/css" href="/css/gridster/jquery.gridster.css">
    <link rel="stylesheet" type="text/css" href="/css/gridster/styles.css">
    <link rel="stylesheet" type="text/css" href="../slick/slick.css"/>
    <script src="/js/vendor/jquery.js"></script>
    <script type="text/javascript" src="/js/gridster/jquery.gridster.js" charster="utf-8"></script>
    <script src="//www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js"></script>
    <script src="https://cdn.socket.io/socket.io-1.3.3.js"></script>
    <link rel="stylesheet" type="text/css" href="/css/custom.css"/>



</head>
<body>
    <div class="row">
        <div class="large-6 columns" style="background-color:#d8d8d8; height:400px;">
            <div id="player"></div>
        </div>

        <div class="large-6 columns" id="img_div" style="background-color:#c3c3c3; height:400px;">

            <img class="displayed" src="/img/eee.jpg">

        </div>

    </div>
    <div class="row">
        <div class="large-12 columns" id="text_window" style="background-color:#a1a1a1; height:400px;">
            <h1 id="custom" style="text-align:center;" >ANNOUNCEMENT EXAM/HW/QUIZ/SW/DP/MP/ME</h1>
        </div>
    </div>


<script type="text/javascript">
    var gridster;

    $(function() {
        gridtster = $(".gridster > ul").gridster({
            widget_margins: [10, 10],
            widget_base_dimensions: [140, 140],
            min_cols: 6
        }).data('gridster');
    });
</script>
<div id="videoModal" class="reveal-modal" data-reveal>
    <h2>Add Video</h2>
    <p>Paste the URL of the video you want to cast:</p>
    <input type="text" id="video_textbox" placeholder="Inline Text Input">
    <p>When is the deadline for this? :</p>
    <input type="text" id="video_deadline" placeholder="Inline Text Input">
    <button onclick="videoAdd()">Add to Queue</button>
    <button onclick="videoPlay()">Play Now</button>
    <a class="close-reveal-modal">&#215;</a>
</div>
<div id="imageModal" class="reveal-modal" data-reveal>
    <h2>Add Image</h2>
    <p>Paste the URL of the image you want to cast:</p>
    <input type="text" id="image_textbox" placeholder="Inline Text Input">
    <p>When is the deadline for this? :</p>
    <input type="text" id="image_deadline" placeholder="Inline Text Input">
    <button>Add to Queue</button>
    <button>Cast Now</button>
    <a class="close-reveal-modal">&#215;</a>
</div>
<div id="textModal" class="reveal-modal" data-reveal>
    <h2>Add Text</h2>
    <form action="/" method="post" content-type="application/json">
        <p>Type the text you want to cast:</p>
        <input type="text" name="custom_text" id="text_textbox" placeholder="Inline Text Input">
        <p>When is the deadline for this? :</p>
        <input type="text" name="custom_deadline" id="text_deadline" placeholder="Inline Text Input">
        <button>Add to Queue</button>
        <button>Cast Now</button>
    </form>
    <a class="close-reveal-modal">&#215;</a>
</div>

<script type='text/javascript'>

    <!-- YouTube iframe API asynchrounous call -->
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    <!-- Code to create iframe after API download -->
    var loadThis;
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: 'M7lc1UVf-VE',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }
    function onPlayerReady(event) {
        event.target.playVideo();
    }
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
    </script>
<script type="text/javascript" src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
<script type="text/javascript" src="../slick/slick.min.js"></script>

<script src="/js/vendor/fastclick.js"></script>
<script type="text/javascript" src="/js/foundation/foundation.js"></script>
<script src="/js/foundation/foundation.reveal.js"></script>
<script type="text/javascript" src="/js/foundation/foundation.dropdown.js"></script>
<script src="/js/requestSender.js"></script>
<script type="text/javascript">
    $(document).foundation();
</script>
<script type="text/javascript" src="js/requestSender.js"></script>
<script type="text/javascript">
    var socket = io.connect('http://localhost:8080/');
    socket.on('customText', function(e){
        console.log(e.text);
        document.getElementById('custom').innerHTML = e.text;
    });

    //socket.emit('test1', {'message':'hi!'});
</script>



</body>
</html>
</body>
</html>